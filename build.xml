<?xml version="1.0"?>
<!--
 *
 * phpRack: Integration Testing Framework
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt. It is also available
 * through the world-wide-web at this URL: http://www.phprack.com/LICENSE.txt
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@phprack.com so we can send you a copy immediately.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @copyright Copyright (c) 2009-2012 phpRack.com
 * @version $Id$
 * @category phpRack
 *
 * This Phing build file. For more information see this document:
 * http://phing.info/docs/guide/current/
 *
-->
<project name="phpRack tests" basedir="." default="main">
    <tstamp/>
    <if>
        <available property="vendor.autoload" file="${project.basedir}/vendor/autoload.php"/>
	<then>
	    <autoloader autoloaderpath="vendor/autoload.php"/>
	</then>
    </if>
    <includepath classpath="${project.basedir}"/>
    <includepath classpath="${project.basedir}/test/"/>
    <php expression="ini_set('memory_limit', '128M');"/>
    <property name="package.name" value="phpRack-stable"/>
    <property name="build.tgz" value="${project.basedir}/build/${package.name}.tgz"/>
    <target name="main" depends="lint, jslint, phpcs, phpmd, test, zca, jscoverage">
    </target>
    <exec command="git log -n 1 --pretty=format:%h" outputproperty="git.hash"/>
    <target name="clean" description="Remove all build-related files">
        <delete dir="${project.basedir}/build"/>
    </target>
    <target name="lint" description="Run syntax check for all classes">
        <phplint haltonfailure="yes" level="verbose">
            <fileset dir="${project.basedir}/src">
                <include name="**/*.php"/>
                <include name="**/*.html"/>
                <include name="**/*.phtml"/>
            </fileset>
        </phplint>
    </target>
    <target name="jslint" description="Validate syntax in all JS files">
        <echo msg="Task is disabled"/>
        <!--
        <jsllint haltonfailure="true">
            <fileset dir="${project.basedir}">
                <include name="**/index.js"/>
                <exclude name="build/**"/>
            </fileset>
        </jsllint>
        -->
    </target>
    <target name="phpcs" description="Validate the quality of PHP code with PHPCS utility">
        <phpcodesniffer standard="Zend" allowedFileExtensions="php,phtml" showWarnings="false">
	    <fileset dir="${project.basedir}/src"/>
        </phpcodesniffer>
    </target>
    <target name="phpmd" description="PHP Mess Detector (PHPMD)">
        <if>
	    <available property="phpmd.phar.exists" file="/usr/local/bin/phpmd.phar"/>
	    <then>
	        <exec command="php /usr/local/bin/phpmd.phar
		    ${project.basedir}/src
		    text
		    codesize,unusedcode
		    --extensions='php,phtml'" escape="false" checkreturn="true" passthru="true"/>
	    </then>
	    <else>
	        <phpmd allowedFileExtensions="php,phtml" rulesets="codesize,unusedcode" format="text">
                    <fileset dir="${project.basedir}/src"/>
                </phpmd>
	    </else>
	</if>
    </target>
    <target name="zca" description="Zend Code Analyzer">
        <zendcodeanalyzer analyzerPath="zca" haltonwarning="true">
            <fileset dir="${project.basedir}/src">
                <include name="**/*.php"/>
                <include name="**/*.phtml"/>
            </fileset>
        </zendcodeanalyzer>
    </target>
    <target name="jscoverage" description="JSCoverage">
        <exec command="jscoverage
            -v
            --exclude=jquery-1.4.2.min.js
            ${project.basedir}/src/phpRack/layout/js
            ${project.basedir}/build/instrumented-js" escape="false" checkreturn="true" passthru="true"/>
    </target>
    <target name="test" description="Run all existing unit-tests">
        <mkdir dir="${project.basedir}/build"/>
        <property name="coverage.database" value="${project.basedir}/build/coverage.data"/>
        <coverage-setup database="${coverage.database}">
            <fileset dir="${project.basedir}/src/phpRack">
                <include name="**/*.php"/>
            </fileset>
        </coverage-setup>
	<if>
	    <available property="phpunit.phar.exists" file="/usr/local/bin/phpunit"/>
	    <then>
                <phpunit pharLocation="/usr/local/bin/phpunit" printsummary="yes" haltonerror="yes" haltonfailure="yes" codecoverage="true">
		    <formatter type="plain" usefile="no"/>
		    <batchtest>
                        <fileset dir="${project.basedir}/src/test">
		            <include name="**/*Test*.php"/>
			    <exclude name="**/Abstract*.php"/>
			    <exclude name="**/_*.php"/>
                            <exclude name="**/integration-tests/**"/>
		        </fileset>
		    </batchtest>
	        </phpunit>
	    </then>
	    <else>
                <phpunit printsummary="yes" haltonerror="yes" haltonfailure="yes" codecoverage="true">
                    <formatter type="plain" usefile="no"/>
                    <batchtest>
                        <fileset dir="${project.basedir}/src/test">
                            <include name="**/*Test*.php"/>
                            <exclude name="**/Abstract*.php"/>
                            <exclude name="**/_*.php"/>
                            <exclude name="**/integration-tests/**"/>
                        </fileset>
                    </batchtest>
                 </phpunit>
            </else>
	</if>
        <mkdir dir="${project.basedir}/build/coverage"/>
        <coverage-report outfile="${project.basedir}/build/coverage.xml">
            <report todir="${project.basedir}/build/coverage"/>
        </coverage-report>
        <coverage-threshold database="${coverage.database}" perProject="65" perClass="0" perMethod="0"/>
        <delete file="${coverage.database}"/>
    </target>
    <target name="package" description="Package the product into TGZ">
        <tar destfile="${build.tgz}" compression="gzip">
            <fileset dir="${project.basedir}/src">
                <include name="phpRack/**"/>
                <include name="LICENSE.txt"/>
            </fileset>
        </tar>
    </target>
    <target name="doc" description="Generate phpDocumentor files">
        <php expression="if (!defined('PHPRACK_PATH')) define('PHPRACK_PATH', '${project.basedir}/src/phpRack');"/>
        <php expression="set_error_handler(create_function('', 'return true;'));"/>
        <phpdoc title="API Documentation, rev.${git.hash}" destdir="${project.basedir}/build/apidocs" sourcecode="false" quiet="true" output="HTML:frames:default">
            <fileset dir="${project.basedir}/phpRack">
                <include name="**/*.php"/>
            </fileset>
            <projdocfileset dir=".">
                <include name="README.txt"/>
                <include name="LICENSE.txt"/>
            </projdocfileset>
        </phpdoc>
    </target>
</project>
